export const projects = [
  {
    id: 1,
    title: "JARVIS-2: Privacy-First Multi-Agent Home Automation Assistant",
    shortDescription: "Locally orchestrated multi-agent AI platform with transparent planning and enterprise-grade security",
    fullDescription: "JARVIS-2 is an ambitious privacy-first multi-agent assistant platform currently in early development phases. The project aims to control smart home devices, manage productivity workflows, and deliver transparent, explainable AI-driven automation through a modular, LangGraph-inspired architecture. The planned system will feature a LangGraph supervisor orchestrator coordinating 7+ specialized agents (Speech, Home Assistant, Weather, Media, Calendar, Memory, Scheduler) with typed adapters, approval-driven policy controls, and OpenTelemetry observability. Core design principles focus on local inference via Home Assistant/ESPHome, human-in-the-loop approvals for risky operations, enterprise-grade security through RBAC and container isolation, and encrypted storage. The architecture envisions local Whisper STT and Piper TTS for voice control, MCP protocol for portable tool connectors, and Docker Compose/Kubernetes deployment. Work in progress since October 2024 with 10+ prior iterations exploring different approaches. Currently in architectural design and early implementation phasesâ€”not yet ready for testing or production use.",
    techStack: ["Python 3.10+", "LangGraph", "OpenTelemetry", "Docker Compose", "Home Assistant", "Whisper STT", "Piper TTS", "MCP Protocol", "ESPHome", "DuckDB", "SQLite", "Kubernetes", "RBAC", "AES-256"],
    category: "AI/ML" as const,
    github: "",
    image: "/projects/jarvis.jpg",
    featured: true,
    duration: "October 2024 - Ongoing (Early Development Phase)",
    teamSize: "Solo (Technical Architect, Lead Engineer, Platform & Security Architect)",
    metrics: [
      { label: "Design Iterations", value: 10, suffix: "+" },
      { label: "Planned Agents", value: 7, suffix: "+" },
      { label: "Phase", value: 1, suffix: "" },
    ],
    challenges: [
      "Opaque multi-agent orchestration: Modern assistants lack transparent decision-making and explainable workflows. Designing a LangGraph stateful supervisor architecture with plan previews, rationale, risk tags, and human-in-the-loop approvals before execution with full OTEL tracing at every boundary.",
      "Cloud dependency for voice: Existing solutions require internet for basic operations, creating privacy risks. Planning local Whisper STT and Piper TTS integration with Home Assistant Assist and ESPHome satellites for on-device wake word detection and local-first execution.",
      "Agent extensibility without vendor lock-in: Adding capabilities typically requires orchestrator code changes. Designing manifest-based registration system (YAML + Python) with typed MCP protocol schemas to enable new agents without orchestrator modifications and with proper RBAC scopes.",
      "Privacy and egress control: Persistent telemetry and mandatory cloud access violate privacy. Architecting RBAC per agent, container isolation with seccomp/read-only FS, policy gates requiring explicit approval for cloud access, and AES-256 encrypted local storage with key rotation.",
      "Enterprise-grade observability: Lack of forensics and compliance tooling for automated flows. Planning to instrument all agent and tool boundaries with OpenTelemetry traces/metrics/logs, correlation IDs, dashboards for SLOs, and immutable audit trails for compliance (SOC 2, GDPR-ready).",
    ],
  },
  {
    id: 2,
    title: "Autonomous Driving AI System",
    shortDescription: "Machine Learning autonomous driving system for Assetto Corsa racing simulator",
    fullDescription: "Developed an autonomous driving system for Assetto Corsa that translates raw visual input into continuous steering control using a regression-based deep learning approach. Built complete pipeline from data collection to real-time deployment with ResNet50 for steering prediction and YOLOv11 for traffic sign detection with OCR-based speed limit recognition.",
    techStack: ["Python", "ResNet50", "YOLOv11", "OCR", "Deep Learning", "Computer Vision", "Real-time Control"],
    category: "AI/ML" as const,
    github: "",
    image: "/projects/autonomous-car.jpg",
    featured: true,
    duration: "Machine Learning Project - Thomas More",
    teamSize: "2 members",
    metrics: [
      { label: "Systems", value: 2, suffix: "" },
      { label: "Models", value: 2, suffix: "" },
      { label: "Real-time", value: 1, suffix: "" },
    ],
    challenges: [
      "Capturing and balancing steering data for robust learning",
      "Achieving accurate steering prediction on sharp turns",
      "Real-time integration with virtual Xbox controller",
      "Building independent but complementary driving and detection systems",
    ],
    outcomes: [
      "Successfully predicted steering angles from visual frames using ResNet50 regression",
      "Achieved high accuracy on sharp turns with recovery capability when drifting off-line",
      "Implemented YOLOv11 traffic sign detection with automatic speed limit recognition via OCR",
      "Integrated real-time control with dynamic throttle adjustment via keyboard inputs",
      "Created complete autonomous driving simulation with driving and detection systems",
    ],
  },
  {
    id: 3,
    title: "Requirements Analysis",
    shortDescription: "Website building requirements analysis project",
    fullDescription: "Collaborated with 4 other individuals to create a data model, use case diagram, and prototype screens using Axure. Served as the group manager, overseeing the entire process and showcasing leadership and project management skills.",
    techStack: ["Axure", "Data Modeling", "Use Case Diagrams"],
    category: "Full Stack" as const,
    github: "",
    image: "/projects/requirements-analysis.jpg",
    featured: true,
    duration: "Second year project",
    teamSize: "5 members",
    metrics: [
      { label: "Team Size", value: 5, suffix: "" },
      { label: "Deliverables", value: 3, suffix: "" },
    ],
    challenges: [
      "Leading a team of 5 members",
      "Creating comprehensive data models",
      "Developing prototype screens",
    ],
    outcomes: [
      "Successfully delivered complete requirements analysis",
      "Created data model, use case diagram, and prototype screens",
      "Demonstrated effective team leadership and project management",
    ],
  },
  {
    id: 4,
    title: "Home Assistant Smart Home System",
    shortDescription: "Comprehensive smart home automation with local voice control and virtualized infrastructure",
    fullDescription: "Designed and implemented a privacy-focused smart home automation system using Home Assistant OS running in a KVM virtual machine on Ubuntu Server. Features multi-room voice control with ESP32 Wyoming Satellite for local voice processing, custom Lovelace dashboard on dedicated touchscreen, and 5.1 surround sound integration. The system prioritizes local processing without cloud dependencies, with all voice commands processed on-device. Includes room-based automation scenarios, energy monitoring, climate control, and custom scripts for advanced workflows.",
    techStack: ["Home Assistant OS", "KVM/QEMU", "Ubuntu Server", "ESP32", "Wyoming Satellite", "Raspberry Pi 4", "Lovelace UI", "Voice Control", "Bridge Networking"],
    category: "IoT" as const,
    github: "",
    image: "/projects/smart-home.jpg",
    featured: true,
    duration: "2019-ongoing",
    teamSize: "Solo",
    metrics: [
      { label: "Rooms", value: 3, suffix: "+" },
      { label: "Duration", value: 6, suffix: " years" },
      { label: "Uptime", value: 99, suffix: "%" },
    ],
    challenges: [
      "VM Performance: Optimized KVM configuration with CPU pinning and dedicated resources to ensure responsive home automation",
      "Voice Processing: Configured ESP32 as Wyoming Satellite for local voice recognition, eliminating cloud dependency",
      "Audio Routing: Integrated PC's 5.1 sound system with Home Assistant for whole-home audio distribution",
      "Network Integration: Configured bridge networking to allow VM to communicate directly with smart home devices on local network",
    ],
    outcomes: [
      "Created fully functional privacy-focused smart home system with local voice control",
      "Achieved local voice processing without relying on cloud services (Google/Alexa)",
      "Implemented reliable home automation accessible via touchscreen, voice, and mobile app",
      "Established virtualized infrastructure for expandable smart home capabilities",
    ],
  },
  {
    id: 5,
    title: "Rasbee",
    shortDescription: "Beehive environment monitoring system",
    fullDescription: "Collaboration project utilizing ESP32 and Raspberry Pi 4 to regulate a beehive environment by monitoring temperature, humidity, and light levels and controlling the lights. Data collected on the ESP32 is transferred to the Raspberry Pi via Bluetooth Low Energy (BLE), which then sends notifications to a mobile phone and Ubeac.",
    techStack: ["ESP32", "Raspberry Pi 4", "BLE", "Ubeac", "Mobile Notifications"],
    category: "IoT" as const,
    github: "",
    image: "/projects/rasbee.jpg",
    featured: false,
    duration: "Recent project",
    teamSize: "Collaboration",
    metrics: [
      { label: "Sensors", value: 3, suffix: "" },
      { label: "Devices", value: 2, suffix: "" },
    ],
    challenges: [
      "Integrating ESP32 with Raspberry Pi via BLE",
      "Monitoring multiple environmental parameters",
      "Implementing real-time notifications",
    ],
    outcomes: [
      "Successfully monitored temperature, humidity, and light levels",
      "Automated light control based on environmental conditions",
      "Real-time notifications to mobile phone and Ubeac platform",
    ],
  },
  {
    id: 6,
    title: "Smart Home Control - Flutter Mobile App",
    shortDescription: "Flutter mobile app for smart home device control and server monitoring",
    fullDescription: "Developed a custom Flutter/Dart mobile application for comprehensive smart home management directly from smartphone. The app features device control with manual categorization into sections, real-time dashboard displaying device states and sensor data, and Docker container management capabilities for starting/stopping containers remotely. Includes server monitoring showing basic system information and resource usage. Provides unified control interface for Home Assistant devices and Ubuntu Server infrastructure management.",
    techStack: ["Flutter", "Dart", "Home Assistant API", "Docker API", "REST API", "Mobile Development", "Android"],
    category: "Full Stack" as const,
    github: "",
    image: "/projects/flutter-app.jpg",
    featured: true,
    duration: "2025",
    teamSize: "Solo",
    metrics: [
      { label: "Platforms", value: 1, suffix: "" },
      { label: "Features", value: 3, suffix: "" },
      { label: "Devices Controlled", value: 10, suffix: "+" },
    ],
    challenges: [
      "Integrating Home Assistant API for device control and state monitoring",
      "Implementing Docker API communication for remote container management",
      "Designing intuitive UI for manual device categorization and dashboard views",
      "Managing real-time data updates for device states and server metrics",
    ],
    outcomes: [
      "Created fully functional mobile app for smart home control on-the-go",
      "Implemented device categorization system for organized management",
      "Built real-time dashboard displaying device states and sensor data",
      "Integrated Docker container control with start/stop capabilities and server monitoring",
    ],
  },
  {
    id: 7,
    title: "Ubuntu Server Infrastructure",
    shortDescription: "Enterprise-grade home server with virtualization, containerization, and secure remote access",
    fullDescription: "Built and maintained a comprehensive home server infrastructure running Ubuntu Server as a central hub for virtualization (KVM/QEMU), containerization (Docker), network services, and remote access. Configured libvirt for VM lifecycle management with isolated virtual networks and resource allocation. Established gigabit Ethernet connectivity with static IP addressing, UFW firewall rules, and NordVPN Meshnet for secure remote administration. Implemented Samba/NFS file sharing for centralized storage at 192.168.0.116 with optimized transfer speeds. Successfully hosts multiple VMs and containerized services with 99%+ uptime, achieving production-ready stability for Home Assistant, Jellyfin, and various development environments.",
    techStack: ["Ubuntu Server", "KVM/QEMU", "libvirt", "Docker Engine", "Docker Compose", "NordVPN Meshnet", "Samba/NFS", "UFW Firewall", "htop", "systemd"],
    category: "DevOps" as const,
    github: "",
    image: "/projects/ubuntu-server.jpg",
    featured: true,
    duration: "2019-ongoing",
    teamSize: "Solo",
    metrics: [
      { label: "Uptime", value: 99, suffix: "%" },
      { label: "VMs Hosted", value: 3, suffix: "+" },
      { label: "Services", value: 10, suffix: "+" },
    ],
    challenges: [
      "Memory Management: Diagnosed memory exhaustion issues using top/htop to identify resource-hungry processes and implement proper resource limits",
      "Network Performance: Troubleshot slow file transfer speeds (2 MB/s) and identified USB Ethernet adapter limitations, achieving optimal gigabit speeds through proper network configuration",
      "VPN Authentication: Successfully reconfigured NordVPN CLI authentication after password changes, maintaining secure remote access",
      "Docker Permissions: Resolved bind mount permission conflicts affecting containerized application deployments",
    ],
    outcomes: [
      "Established stable, production-ready home server environment with 99%+ uptime",
      "Successfully host multiple VMs and containerized services simultaneously",
      "Enabled secure remote access from anywhere via VPN Meshnet",
      "Created scalable infrastructure foundation for future projects",
    ],
  },
  {
    id: 8,
    title: "Jellyfin Home Media Server",
    shortDescription: "Self-hosted media streaming platform with Docker containerization",
    fullDescription: "Deployed and configured a self-hosted media streaming server using Jellyfin within a Docker containerized environment on Ubuntu Server, providing a free alternative to proprietary streaming platforms with full control over media content. Configured Docker Compose stack for easy container management and updates, with volume mounts for media libraries (movies, TV shows, music, ebooks). Set up network file sharing for centralized media storage and configured transcoding settings for optimal streaming across different devices and bandwidth conditions. Implemented user authentication and access controls for secure remote streaming accessible across home network and remotely.",
    techStack: ["Jellyfin", "Docker", "Docker Compose", "Ubuntu Server", "FFmpeg", "Network Storage", "Media Transcoding"],
    category: "DevOps" as const,
    github: "",
    image: "/projects/jellyfin.jpg",
    featured: false,
    duration: "2023-ongoing",
    teamSize: "Solo",
    metrics: [
      { label: "Users", value: 5, suffix: "+" },
      { label: "Media Libraries", value: 4, suffix: "" },
      { label: "Devices", value: 10, suffix: "+" },
    ],
    challenges: [
      "XML Configuration Issues: Diagnosed and resolved corrupted XML metadata files that prevented media playback, implementing proper file validation and backup procedures",
      "File Path Problems: Troubleshot DirectoryNotFoundException errors in Docker container by correctly mapping host paths to container volumes, ensuring FFmpeg could access media files",
      "Permission Management: Resolved Docker bind mount permission issues to ensure proper read/write access for media files",
    ],
    outcomes: [
      "Successfully deployed fully functional media server accessible across home network and remotely",
      "Achieved reliable media streaming with support for multiple simultaneous users",
      "Implemented automated media library management and metadata fetching",
      "Created cost-effective alternative to subscription streaming services",
    ],
  },
  {
    id: 9,
    title: "Tour de France Dashboard",
    shortDescription: "Comprehensive BI analytics using Qlik Sense with dimensional modeling",
    fullDescription: "Developed a comprehensive Business Intelligence analytics dashboard analyzing over 100 years of Tour de France historical data using Qlik Sense Cloud. Implemented dimensional modeling following Kimball methodology with star schema design, featuring fact tables (Tour editions with measures) and dimension tables (Riders, Countries, Teams, Stages). Built ETL process using Qlik load scripts for data cleaning, validation, and transformation. Created calculated fields for complex metrics including time conversions, rankings, and aggregations. Designed multiple interactive dashboard sheets answering research questions about historical trends, dominant riders, country-level performance, stage distribution, and winner demographics. Successfully resolved circular references, synthetic keys, and field mapping errors through proper dimensional modeling.",
    techStack: ["Qlik Sense Cloud", "Kimball Methodology", "Star Schema", "ETL", "Data Modeling", "Qlik Script", "Data Visualization", "BI Analytics"],
    category: "Data Science" as const,
    github: "",
    image: "/projects/tour-de-france.jpg",
    featured: false,
    duration: "Business Intelligence Project - Thomas More",
    teamSize: "Solo",
    metrics: [
      { label: "Data Years", value: 100, suffix: "+" },
      { label: "Dashboard Sheets", value: 5, suffix: "+" },
      { label: "Visualizations", value: 15, suffix: "+" },
    ],
    challenges: [
      "Circular References: Resolved complex circular reference issues in data model by restructuring joins and using proper key fields",
      "Synthetic Keys: Eliminated synthetic keys through proper dimensional modeling and unique key creation",
      "Time Calculations: Implemented complex time parsing for race durations (converting '1h 42' 54\"' format to seconds)",
      "Data Quality: Handled missing values, outliers, and inconsistent historical data",
    ],
    outcomes: [
      "Successfully implemented dimensional modeling with star schema following BI best practices",
      "Created interactive dashboards answering complex analytical questions about race performance",
      "Demonstrated mastery of ETL processes, data transformation, and Qlik Sense platform",
      "Delivered exam-ready project meeting all course evaluation criteria",
    ],
  },
];

export const skills = {
  aiml: ["LangGraph", "Multi-Agent Systems", "FastAI", "PyTorch", "TensorFlow", "YOLO", "Computer Vision", "Deep Learning", "AI", "Machine Learning", "Whisper STT", "NLP"],
  programming: ["Python 3.10+", "Java", "C++", "JavaScript", "TypeScript", "SQL", "Dart", "Flutter"],
  webDev: ["React", "Next.js", "ASP.NET", "Spring Boot", "Tailwind CSS", "HTML/CSS", "Axure", "Data Modeling", "REST API"],
  devops: ["Docker", "Docker Compose", "Kubernetes", "OpenTelemetry", "CI/CD", "Helm Charts", "Ubuntu Server", "Git", "GitHub", "KVM/QEMU", "libvirt", "NordVPN", "UFW Firewall"],
  hardware: ["Raspberry Pi 4", "ESP32", "Home Assistant OS", "ESPHome", "Arduino", "BLE", "IoT Systems", "Wyoming Satellite"],
  dataScience: ["Qlik Sense", "ETL", "Dimensional Modeling", "Star Schema", "Kimball Methodology", "Data Visualization", "BI Analytics"],
  media: ["Jellyfin", "FFmpeg", "Media Transcoding", "Samba/NFS"],
  security: ["Container Isolation", "Policy Enforcement", "Audit Logging", "Secrets Management", "VPN", "Firewall Configuration"]
};

export const personalInfo = {
  name: "Abdul salam Aldabik",
  nickname: "Salumi",
  title: "Applied Computer Science Student - AI Specialization",
  tagline: "Building innovative solutions with Artificial Intelligence and IoT",
  bio: "Driven by a desire to build game-changing technologies, I'm an Applied Computer Science student specializing in AI at Thomas More. I see ACS as my launchpad, equipping me with the knowledge and tools to turn innovative ideas into reality. Beyond personal projects, I thrive in collaborative environments, earning praise for my leadership and brainstorming skills.",
  location: "Av. d'Auderghem 275, 1040 Etterbeek, Belgium",
  university: "Thomas More",
  program: "Applied Computer Science - AI Specialization",
  email: "r0918747@student.thomasmore.be",
  phone: "0032465726743",
  github: "https://github.com/abdulsalam-aldabik",
  linkedin: "https://www.linkedin.com/in/abdulsalamaldabik/"
};
